class Solution:
#TC:O(log n)
#SC: O(1) not using any additional memory
    def findPeakElement(self, nums: List[int]) -> int:
        '''
        find mid check if mid is greater than left or right side
        and make changes to low or high according to the side that is greater
        '''
        if nums is None or len(nums)==0:
            return -1
        l=0
        h=len(nums)-1

        while l<=h:
            mid=(l+h)//2
            if (mid == l or nums[mid] > nums[mid - 1]) and (mid==h or nums[mid] > nums[mid + 1]):
                return mid
            
            elif nums[mid+1]> nums[mid]:
                l=mid+1
            else:
                h=mid-1

        return -1
        
        #error len(arr) -1; l=mid+1 add paranthesis
